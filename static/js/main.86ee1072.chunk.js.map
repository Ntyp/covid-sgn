{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","data","setData","count","setCount","dataChart","setDataChart","tick","useEffect","fetch","then","response","json","console","log","data_date","i","length","moment","format","subtract","interval","setInterval","tempData","colorx11","sort","a","b","timeline","cases","map","item","index","model","id","title","country","value","color","push","clearInterval","backgroundColor","width","padding","itemHeight","gap","titleStyle","font","valueStyle","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wQAKe,SAASA,IACtB,MAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA0BF,mBAAS,GAAnC,mBAAOG,EAAP,KAAcC,EAAd,KACA,EAAkCJ,mBAAS,IAA3C,mBAAOK,EAAP,KAAkBC,EAAlB,KAyBMC,EAAO,WAETH,EADCD,EAAO,GACCA,EAAM,EAIN,IAMbK,qBAAW,WACTC,MAAM,yDACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAT,GACJC,EAAQD,MAGVY,QAAQC,IAAIb,KACb,IAGH,IADA,IAAIc,EAAY,GACRC,EAAE,EAAEA,GAAGf,EAAKgB,OAAOD,IAEN,GAAhBD,EAAUC,KAEXD,EAAU,GAAKG,MAASC,OAAO,WAEjCJ,EAAUC,GAAKE,MAASE,SAAS,GAAGJ,EAAG,QAAQG,OAAO,UA+GxD,OA3GAX,qBAAU,WACR,IAAMa,EAAWC,YAAYf,EAAK,KAC9BgB,EAAW,GACXC,EAAW,CAAC,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,WAsB1G,OArBAvB,EAAKwB,MAAK,SAACC,EAAEC,GAAH,OAAOA,EAAEC,SAASC,MAAMd,EAAUZ,IAAUuB,EAAEE,SAASC,MAAMd,EAAUZ,OAAS2B,KAAI,SAACC,EAAKC,GAClG,IAAMC,EAAS,CACXC,GAAGF,EACHG,MAAMJ,EAAKK,QACXC,MAAMN,EAAKH,SAASC,MAAMd,EAAUZ,IACpCmC,MAAMd,EAASQ,IAIhBA,EAAQ,IACTT,EAASgB,KAAKN,MAOlB3B,EAAaiB,GAIN,WAEHiB,cAAcnB,MAElB,CAAClB,IAgFD,gCACE,mCACE,2DACA,yCAAkB,+BAAOY,EAAU,EAAEZ,KAFvC,IAEsD,uBAGpD,cAAC,IAAD,CACAF,KAAMI,EACNoC,gBAAgB,OAChBC,MAAO,IACPC,QAAS,GACTC,WAAY,GACZC,IAAK,GACLC,WAAY,CAAEC,KAAM,wBAAyBT,MAAO,QACpDU,WAAY,CAAED,KAAM,wBAAyBT,MAAO,gCActD,8BC3MN,IAYeW,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBzC,MAAK,YAAkD,IAA/C0C,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.86ee1072.chunk.js","sourcesContent":["import React , { Component , useState , useEffect} from 'react';\nimport './App.css';\nimport moment from 'moment'\nimport ChartRace from 'react-chart-race';\nimport randomColor from \"randomcolor\";\nexport default function App() {\n  const [data, setData] = useState([]);\n  const [count, setCount] = useState(0);\n  const [dataChart, setDataChart] = useState([])\n  var dayout = 30;\n\n\n  /* const datachart = [{\n    id:\"\",\n    title:\"\",\n    value:\"\",\n    color:\"\"\n  }] */\n// **********************************************\n    // Random Color\n// **********************************************\n\n  const randomColor = () => {\n    return 'rgb(${255 * Math.random()}, ${255 * Math.random()}, ${255})';\n  }\n\n  \n\n// **********************************************\n    // Fetch & Set Interval Data\n// **********************************************\n\n\n  const tick = () => {\n    if(count <28) {\n      setCount(count+1)\n      \n    }\n    else{\n      setCount(0)\n    }\n  } \n\n \n\n  useEffect (() => {\n    fetch(\"https://disease.sh/v3/covid-19/historical?lastdays=30\")\n      .then(response => response.json())\n      .then(data => {\n        setData(data)\n      })\n      \n      console.log(data)\n  }, [] )\n\n  let data_date = []\n  for(let i=0;i<=data.length;i++)\n  {\n    if(data_date[i] == 1)\n    {\n      data_date[1] = moment().format('M/D/YY');\n    }\n    data_date[i] = moment().subtract(29-i, 'days').format('M/D/YY');\n    // console.log(data_date[i])\n  }\n  \n  useEffect(() => {\n    const interval = setInterval(tick,300)\n    let tempData = [];\n    let colorx11 = ['#CC0000','#CC0066','#CC3300','#CC6600','#CC9900','#CCCC00','#CCFF00','#99FF00','#99CC00','#999900']\n    data.sort((a,b)=>b.timeline.cases[data_date[count]] - a.timeline.cases[data_date[count]]).map((item,index)=>{\n      const model =  {\n          id:index,\n          title:item.country,\n          value:item.timeline.cases[data_date[count]],\n          color:colorx11[index]\n      }\n      \n      /* tempData.push(model) */\n      if(index < 10) {\n        tempData.push(model)\n      }\n      return \n      \n    })\n    // console.log(\"tempData =>\",tempData)\n    // console.log(\"dataChart\",dataChart)\n    setDataChart(tempData)\n    // ChangeData\n    // const datachart = [{id:{},title:{},value:{},color:{}}]    //Convert data to datachart type : id = {index} title = {country} + {province} value: {timeline.date[data_date[count]]} color:{???}\n\n    return () => {\n        \n        clearInterval(interval)\n    }\n  },[count])\n  \n  // useEffect(() => {\n  //   let tempcolor = [];\n  //   data.sort((a,b)=>b.timeline.cases[data_date[count]] - a.timeline.cases[data_date[count]]).map((item,index)=>{\n  //     const colorx = { \n  //       color:randomColor({index})\n  //     }\n  //     if(index < 10) {\n  //       tempcolor.push(colorx)\n  //     }\n      \n  //     return\n  //   })\n  //   console.log(\"tempColor =>\",tempcolor)\n  //   setDataChart(tempcolor)\n  // },[])\n\n  // useEffect(() => {\n  //   let tempColor\n  //   data.sort((a,b)=>b.timeline.cases[data_date[count]] - a.timeline.cases[data_date[count]]).map((item,index)=>{\n  //     const colorx = {\n  //       color:randomColor()\n  //     }\n  //   }\n  // })\n  // },[])\n  \n\n  // useEffect(() => {\n  //   let colordata = [];\n  //   data.sort((a,b)=>b.timeline.cases[data_date[count]] - a.timeline.cases[data_date[count]]).map((item,index)=>{\n  //     const model =  {\n  //         color:randomColor()\n  //     }\n  //     return \n  //   })\n  //   setDataChart(colordata)\n  \n  // },[count])\n  // useEffect(() => {\n  //   data.sort((a,b)=>b.timeline.cases[data_date[count]] - a.timeline.cases[data_date[count]]).map((item,index)=>{\n  //     const model =  {\n  //         id:index,\n  //         title:item.country,\n  //         value:item.timeline.cases[data_date[count]],\n  //         color:''\n  //     }\n  // })\n  \n\n  \n\n\n\n\n// **********************************************\n// **********************************************\n\n\n\n\n// **********************************************\n    // Set Date to Array\n// **********************************************\n\n\n  \n// {dataChart.map((item , index) => (\n//   dataChart.color = randomColor()\n//   console.log(dataChart.color)\n// ))}\n\n// **********************************************\n// **********************************************\n\n\n \n  return(\n    \n    <div>\n      <center>\n        <h2>Covid Global Cases by SGN</h2>\n        <span>Date:</span><span>{data_date[0+count]}</span> <br></br>\n        \n        \n        <ChartRace\n        data={dataChart}\n        backgroundColor='#000'\n        width={1000}\n        padding={50}\n        itemHeight={15}\n        gap={12}\n        titleStyle={{ font: 'normal 400 13px Arial', color: '#fff' }}\n        valueStyle={{ font: 'normal 400 11px Arial', color: 'rgba(255,255,255, 0.42)' }}\n      />\n      </center>\n      \n      {/* {data.sort((a,b)=>b.timeline.cases[data_date[count]] - a.timeline.cases[data_date[count]]).map((el , index)  => (\n        <div>\n          \n          <center>\n          \n          </center>\n            \n        </div>\n      ))} */}\n\n      <center>\n\n      </center>\n    </div>\n  )\n}\n\n\n\n{/* <ul>\n            <li key={index}> {index}.{el.country}{el.province} =   {el.timeline.cases[data_date[count]]}   </li>\n          </ul> */}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}